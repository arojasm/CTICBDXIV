
-- CLASES PROGRAMA BIG DATA - UNI
-- CLASE HIVE 
-- ARTURO ROJAS - 25102020

create DATABASE IF NOT EXISTS FORMATOS
COMMENT 'Base de datos para aprender manejo de todos los formatos'
LOCATION '/empresa/bds/formatos';

-- FORMATO TEXTFILE

CREATE EXTERNAL TABLE IF NOT EXISTS FORMATOS.CLIENTE_TEXTFILE (
ID_CLIENTE STRING,
NOMBRE STRING,
TELEFONO STRING,
CORREO STRING,
FECHA_INGRESO STRING,
EDAD INT,
SALARIO DOUBLE,
ID_EMPRESA STRING
)
COMMENT 'Tabla de clientes formato trextfile'
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
TBLPROPERTIES ('creator' = 'Arturo Rojas', 'created_at' = '2020-10-25', 'skip.header.line.count'='1'); 

LOAD DATA LOCAL INPATH 'dataset/cliente.data' INTO TABLE
FORMATOS.CLIENTE_TEXTFILE;

SELECT * FROM FORMATOS.CLIENTE_TEXTFILE LIMIT 10;

--- FORMATO PARQUET

CREATE EXTERNAL TABLE IF NOT EXISTS FORMATOS.CLIENTE_PARQUET (
ID_CLIENTE STRING,
NOMBRE STRING,
TELEFONO STRING,
CORREO STRING,
FECHA_INGRESO STRING,
EDAD INT,
SALARIO DOUBLE,
ID_EMPRESA STRING
)
COMMENT 'Tabla de clientes formato parquet'
STORED AS PARQUET;


-- INSERTANDO DATA:
INSERT OVERWRITE TABLE FORMATOS.CLIENTE_PARQUET
SELECT * FROM
FORMATOS.CLIENTE_TEXTFILE
WHERE 
ID_CLIENTE != 'ID_CLIENTE';


SELECT * FROM FORMATOS.CLIENTE_PARQUET LIMIT 5;


-- foramto orc:

CREATE EXTERNAL TABLE IF NOT EXISTS FORMATOS.CLIENTE_ORC (
ID_CLIENTE STRING,
NOMBRE STRING,
TELEFONO STRING,
CORREO STRING,
FECHA_INGRESO STRING,
EDAD INT,
SALARIO DOUBLE,
ID_EMPRESA STRING
)
COMMENT 'Tabla de clientes formato ORC'
STORED AS ORC;


-- INSERTANDO DATA:
INSERT OVERWRITE TABLE FORMATOS.CLIENTE_ORC
SELECT * FROM
FORMATOS.CLIENTE_TEXTFILE
WHERE 
ID_CLIENTE != 'ID_CLIENTE';


SELECT * FROM FORMATOS.CLIENTE_ORC LIMIT 5;


----
-- formato avro
-- crear la estrutura de carpeta en hdfs para almacenar el esquema avro.
-- crear el archivo avro

-- 
drop table FORMATOS.CLIENTE_AVRO;
CREATE EXTERNAL TABLE IF NOT EXISTS FORMATOS.CLIENTE_AVRO 
COMMENT 'Tabla de clientes formato AVRO'
STORED AS AVRO
LOCATION '/empresa/bds/formatos/cliente_avro'
TBLPROPERTIES (
'avro.schema.url'='hdfs:///empresa/schema/formatos/cliente_avro.avsc'
);

--- insertar data:
INSERT OVERWRITE TABLE FORMATOS.CLIENTE_AVRO
SELECT * FROM
FORMATOS.CLIENTE_TEXTFILE
WHERE 
ID_CLIENTE != 'ID_CLIENTE';


---------------------------
--

CREATE EXTERNAL TABLE IF NOT EXISTS FORMATOS.CLIENTE_PARQUET_SNAPPY (
ID_CLIENTE STRING,
NOMBRE STRING,
TELEFONO STRING,
CORREO STRING,
FECHA_INGRESO STRING,
EDAD INT,
SALARIO DOUBLE,
ID_EMPRESA STRING
)
COMMENT 'Tabla de clientes formato PARQUET - compresión SNAPPY'
STORED AS PARQUET
TBLPROPERTIES ('creator' = 'Arturo Rojas', 'created_at' = '2020-10-25', 'parquet.compression'='SNAPPY'); 

SET hive.exec.compress.output=true;
SET parquet.compression=SNAPPY;

INSERT OVERWRITE TABLE FORMATOS.CLIENTE_PARQUET_SNAPPY
SELECT * FROM
FORMATOS.CLIENTE_TEXTFILE
WHERE 
ID_CLIENTE != 'ID_CLIENTE';

---


SELECT * FROM FORMATOS.CLIENTE_PARQUET_SNAPPY LIMIT 5;

DROP TABLE FORMATOS.CLIENTE_ORC_SNAPPY;
CREATE EXTERNAL TABLE IF NOT EXISTS FORMATOS.CLIENTE_ORC_SNAPPY (
ID_CLIENTE STRING,
NOMBRE STRING,
TELEFONO STRING,
CORREO STRING,
FECHA_INGRESO STRING,
EDAD INT,
SALARIO DOUBLE,
ID_EMPRESA STRING
)
COMMENT 'Tabla de clientes formato ORC - compresión SNAPPY'
STORED AS ORC
TBLPROPERTIES ('creator' = 'Arturo Rojas', 'created_at' = '2020-10-25', 'orc.compression'='SNAPPY'); 


SET hive.exec.compress.output=true;
SET orc.compression=SNAPPY;

-- INSERTANDO DATA:
INSERT OVERWRITE TABLE FORMATOS.CLIENTE_ORC_SNAPPY
SELECT * FROM
FORMATOS.CLIENTE_TEXTFILE
WHERE 
ID_CLIENTE != 'ID_CLIENTE';


SELECT * FROM FORMATOS.CLIENTE_ORC_SNAPPY LIMIT 5;



--------


-- 
DROP TABLE FORMATOS.CLIENTE_AVRO_SNAPPY;

CREATE EXTERNAL TABLE IF NOT EXISTS FORMATOS.CLIENTE_AVRO_SNAPPY 
COMMENT 'Tabla de clientes formato AVRO SNAPPY'
STORED AS AVRO
LOCATION '/empresa/bds/formatos/cliente_avro_snappy'
TBLPROPERTIES (
'avro.schema.url'='hdfs:///empresa/schema/formatos/cliente_avro.avsc',
'avro.output.codec'='snappy'
);

SET hive.exec.compress.output=true;
SET avro.output.codec=snappy;

--- insertar data:
INSERT OVERWRITE TABLE FORMATOS.CLIENTE_AVRO_SNAPPY
SELECT * FROM
FORMATOS.CLIENTE_TEXTFILE
WHERE 
ID_CLIENTE != 'ID_CLIENTE';



------------------------------


CREATE EXTERNAL TABLE TEMPORAL.EMPRESA(
ID_EMPRESA STRING,
NOMBRE STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
TBLPROPERTIES ('creator'='Arturo Rojas', 'created_at'='2020-10-25', 'skip.header.line.count'='1');

hdfs dfs -put dataset/empresa.data /empresa/bds/temporal/empresa


SET hive.exec.dynamic.partition=true; 
SET hive.exec.dynamic.partition.mode=nonstrict;


INSERT OVERWRITE TABLE BUSINESS.HIST_TRANSACCIONES 
PARTITION (FECHA_TRANSACCION) 
SELECT
T.ID_CLIENTE,
P.NOMBRE,
CAST(P.EDAD AS INT),
CAST(P.SALARIO AS DOUBLE),
T.ID_EMPRESA,
E.NOMBRE,
CAST(T.MONTO AS DOUBLE),
T.FECHA
FROM TEMPORAL.TRANSACCION_PARTICIONADA T
JOIN FORMATOS.CLIENTE_PARQUET P ON T.ID_CLIENTE = P.ID_CLIENTE
JOIN TEMPORAL.EMPRESA E ON T.ID_EMPRESA = E.ID_EMPRESA;


SELECT * FROM BUSINESS.HIST_TRANSACCIONES LIMIT 10;

-- funciones soportadas por HIVE
show functions;

-- funciones de UPPER, ROUND
SELECT 
UPPER (NOMBRE_CLIENTE) NOMBRE,
SALARIO_CLIENTE,
ROUND (SALARIO_CLIENTE * 0.13) AS IMPORTE_AFP
FROM 
BUSINESS.HIST_TRANSACCIONES LIMIT 10;

SET hive.map.aggr=true;

-- FUNCIONES AVG
SELECT 
COUNT(*), 
AVG(SALARIO_CLIENTE) SALARIO_PROMEDIO 
FROM BUSINESS.HIST_TRANSACCIONES LIMIT 10;

SELECT COUNT(*) FROM BUSINESS.HIST_TRANSACCIONES LIMIT 10;

SET hive.map.aggr=true;

-- consultas con sentencias CASE WHEN
SELECT 
COUNT(*) AS CTD_CLIENTE,
CASE
WHEN SALARIO_CLIENTE < 11708 THEN 'DEBAJO DEL PROMEDIO'
ELSE 'SUPERIOR AL PROMEDIO'
END RANGO_SUELDO,
AVG(SALARIO_CLIENTE) PROMEDIO_SUELDO
FROM
BUSINESS.HIST_TRANSACCIONES
GROUP BY 
CASE
WHEN SALARIO_CLIENTE < 11708 THEN 'DEBAJO DEL PROMEDIO'
ELSE 'SUPERIOR AL PROMEDIO'
END; 

-- creando vistas en HIVE
CREATE VIEW VENTAS_EMPRESA_1 AS
SELECT 
NOMBRE_EMPRESA,
COUNT(*) AS CTD,
ROUND(SUM(MONTO_TRANSACCION)) MONTO_TRANSACCION
FROM
BUSINESS.HIST_TRANSACCIONES
GROUP BY 
NOMBRE_EMPRESA;


-- generación de archivos en una ruta de linux (spool)

INSERT OVERWRITE LOCAL DIRECTORY 'home/r2d2/main/data'
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
SELECT * FROM BUSINESS.HIST_TRANSACCIONES WHERE SALARIO_CLIENTE < 11708;

